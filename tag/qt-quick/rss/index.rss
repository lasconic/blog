<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Qt Quick - Lasconic's notes</title><description>Desktop, web, mobile and beyond...</description><link>http://127.0.0.1:2368/</link><generator>Ghost 0.5</generator><lastBuildDate>Thu, 18 Sep 2014 14:18:38 GMT</lastBuildDate><atom:link href="http://127.0.0.1:2368/tag/qt-quick/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>A customized busy indicator in Qt Quick</title><description>&lt;p&gt;For the &lt;a href='http://musescore.com/apps' &gt;MuseScore apps&lt;/a&gt;, I needed an easily customizable &lt;a href='http://qt-project.org/doc/qt-5/qml-qtquick-controls-busyindicator.html' &gt;&lt;code&gt;BusyIndicator&lt;/code&gt;&lt;/a&gt;. The designer came up with something similar to &lt;a href='http://fgnass.github.io/spin.js/' &gt;spin.js&lt;/a&gt; but of course, we needed it in QML. &lt;/p&gt;

&lt;p&gt;Here is spin.js in action: &lt;br /&gt;
&lt;img src='http://127.0.0.1:2368/content/images/2014/Sep/spinjs.gif'  alt="" /&gt;&lt;/p&gt;

&lt;p&gt;And here is the QML version. &lt;br /&gt;
Since we can't run QML in the browser (&lt;a href='https://gitorious.org/qmlweb/pages/Home' &gt;yet?&lt;/a&gt;), I made a short video. Of course, you can just &lt;a href='https://github.com/lasconic/CustomBusyIndicator-QML' &gt;download the source code&lt;/a&gt; and run it yourself.&lt;/p&gt;

&lt;iframe width="560" height="315" src='http://www.youtube.com/embed/pn3dWPNeA2M'  frameborder="0" allowfullscreen&gt; &lt;/iframe&gt;

&lt;h3 id="busyindicatorstyle"&gt;BusyIndicatorStyle&lt;/h3&gt;

&lt;p&gt;Qt Quick Controls can be customized with a (ControlName)Style. For a &lt;code&gt;BusyIndicator&lt;/code&gt;, it's a &lt;a href='http://qt-project.org/doc/qt-5/qml-qtquick-controls-styles-busyindicatorstyle.html' &gt;&lt;code&gt;BusyIndicatorStyle&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;BusyIndicatorStyle {  
    id: style
    property int lines: 11
    property real length: 10 // % of the width of the control
    property real width: 5 // % of the height of the control
    property real radius: 13 // % of the width of the control
    property real corner: 1 // between 0 and 1
    property real speed: 100 // smaller is faster
    property real trail: 0.6 // between 0 and 1
    property bool clockWise: true

    property real opacity: 0.7
    property string color: "#7B756B"
    property string highlightColor: "white"
    property string bgColor: "black"

    indicator: Rectangle {
        color: style.bgColor
        visible: control.running
        Repeater {
            id: repeat
            model: style.lines
            Rectangle {
                property real factor: control.width / 200
                color: style.color
                opacity: style.opacity
                Behavior on color {
                    ColorAnimation {
                        from: style.highlightColor
                        duration: style.speed * style.lines * style.trail
                    }
                }
                radius: style.corner * height / 2
                width: style.length * factor
                height: style.width * factor
                x: control.width / 2 + style.radius * factor
                y: control.height / 2 - height / 2
                transform: Rotation {
                    origin.x: -style.radius * factor
                    origin.y: height / 2
                    angle: index * (360 / repeat.count)
                }
                Timer {
                    id: reset
                    interval: style.speed * (style.clockWise ? index : style.lines - index)
                    onTriggered: {
                        parent.opacity = 1
                        parent.color = style.highlightColor
                        reset2.start()
                    }
                }
                Timer {
                    id: reset2
                    interval: style.speed
                    onTriggered: {
                        parent.opacity = style.opacity
                        parent.color = style.color
                    }
                }
                Timer {
                    id: globalTimer // for a complete cycle
                    interval: style.speed * style.lines
                    onTriggered: {
                        reset.start()
                    }
                    triggeredOnStart: true
                    repeat: true
                }
                Component.onCompleted: {
                    globalTimer.start()
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I exposed the different customization parameters as QML properties. &lt;/p&gt;

&lt;p&gt;Then the core of the style is a &lt;a href='http://qt-project.org/doc/qt-5/qml-qtquick-repeater.html' &gt;Repeater&lt;/a&gt;. It will draw a given number of &lt;a href='http://qt-project.org/doc/qt-5/qml-qtquick-rectangle.html' &gt;Rectangles&lt;/a&gt; using the color, corner radius etc... and of course a &lt;a href='http://qt-project.org/doc/qt-5/qml-qtquick-rotation.html' &gt;Rotation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To animate the spinner, I relied on 3 &lt;a href='http://qt-project.org/doc/qt-5/qml-qtqml-timer.html' &gt;Timers&lt;/a&gt; per rectangle. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A global timer fires for every cycle and start a second timer. &lt;/li&gt;
&lt;li&gt;This second timer will animate the color and opacity of the given rectangle with an interval depending on the index of the rectangle and start a new timer. &lt;/li&gt;
&lt;li&gt;This last timer will restore the state of the rectangle to default according to the speed parameters.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="sourcecode"&gt;Source code&lt;/h2&gt;

&lt;p&gt;The code is on GitHub: &lt;a href='https://github.com/lasconic/CustomBusyIndicator-QML' &gt;CustomBusyIndicator&lt;/a&gt; &lt;br /&gt;
It could be that there is a better and more QML way of doing the animation. If so, let me know &lt;a href='https://twitter.com/lasconic' &gt;@lasconic&lt;/a&gt;&lt;/p&gt;</description><link>http://127.0.0.1:2368/a-customized-busy-indicator-in-qt-quick/</link><guid isPermaLink="false">5d3016a8-8350-4e3d-81d8-205a190cf415</guid><category>Qt</category><category>QML</category><category>Qt Quick</category><dc:creator>lasconic</dc:creator><pubDate>Thu, 18 Sep 2014 13:16:17 GMT</pubDate></item><item><title>How to use Google Analytics in a Qt Quick app for Android/iOS</title><description>&lt;p&gt;Even if there are other mobile analytics services such as &lt;a href='http://www.flurry.com/' &gt;Flurry&lt;/a&gt;, Google Analytics (GA) is a popular (and free) way to get insights about marketing campaigns or app usage. In this article I will explain how to implement a simple tracking of displayed screens and events in a multiplatform Qt Quick app. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;tl;dr&lt;/em&gt; : A sample app is available on GitHub:  &lt;a href='https://github.com/lasconic/GATutorial-QML' &gt;GATutorial-QML&lt;/a&gt;. &lt;/p&gt;

&lt;h4 id="chooseyourway"&gt;Choose your way&lt;/h4&gt;

&lt;p&gt;When integrating with third party services in a Qt Quick app, there are often two ways. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The API way&lt;/li&gt;
&lt;li&gt;The native SDK way&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For GA, there is a low level API called &lt;a href='https://developers.google.com/analytics/devguides/collection/protocol/v1/' &gt;Measurement Protocol&lt;/a&gt;. When a low level API, the developer is required to write more code. Here, we would need to cache data when the user is offline, get device ID ourself etc... The advantage of using the low level API is that it's easy to make a cross platform app. Measurement protocol relies only on HTTP.&lt;/p&gt;

&lt;p&gt;GA also provides SDKs for Android and iOS. Both SDKs most likely implements the Measurement Protocol but they also provide several other features such as automatic screen views tracking (but a Qt Quick app cannot use it...), caching of hits when the device is offline, getting device ID for better tracking... To sum it up, The SDKs are doing all the heavy lifting for us. Google also provide an &lt;a href='https://github.com/googleanalytics/google-analytics-plugin-for-unity' &gt;SDK for Unity&lt;/a&gt; but no Qt Quick SDK. It's a curse any Qt developer will encounter a lot... (Hopefully not for long!)&lt;/p&gt;

&lt;p&gt;If you are reading this, and know about a Google Analytics Qt project, even not from Google, &lt;a href='http://twitter.com/lasconic' &gt;let me know&lt;/a&gt;, I'd love to be wrong.&lt;/p&gt;

&lt;p&gt;Our app is currently only available on iOS and Android. So, I chose the SDK way with a future fallback to Measurement Protocol if necessary.&lt;/p&gt;

&lt;h3 id="creatingtheappandasimpleapi"&gt;Creating the app and a simple API&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Obviously a new property and tracking ID is necessary. You can get one on Google Analytics website.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a C++ class we can call from QML. The class has two Q_INVOKABLE functions &lt;code&gt;sendHit&lt;/code&gt; and &lt;code&gt;sendEvent&lt;/code&gt;. Both are just calling the native implementation that we will implement later. We also define a mother class for the native implementation &lt;code&gt;PlatformGoogleAnalytics&lt;/code&gt;. Next paragraphs will describe the Android and iOS implementation. A default implementation using Measurement Protocol could be written too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Expose the class to QML. In main.cpp, add &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language-cpp"&gt;GoogleAnalytics ganalytics;  
ganalytics.initTracker();  
engine.rootContext()-&amp;gt;setContextProperty("gAnalytics", &amp;amp;ganalytics);  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;in QML, to register an new screen view, just call&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;gAnalytics.sendHit("myView")  
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="androidglue"&gt;Android glue&lt;/h3&gt;

&lt;p&gt;We have now a C++ class that we can call from QML. This class will now need to call Java and the Google Analytics SDK for Android.&lt;/p&gt;

&lt;h5 id="setupthegoogleanalyticssdkforandroid"&gt;Setup the Google Analytics SDK for Android&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Create a directory in your project named &lt;code&gt;android_data&lt;/code&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add the following to your pro file &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language-javascript "&gt;ANDROID_PACKAGE_SOURCE_DIR = $$PWD/android_data  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Qt Creator will merge the &lt;code&gt;android_data&lt;/code&gt; directory with the one provided by Qt when building.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Install the Google Analytics SDK for Android. You can find it in the maintenance tool of the SDK, in the extra section. Once installed, copy the &lt;code&gt;sdk/extras/google/google_play_services&lt;/code&gt; directory to &lt;code&gt;android_data&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;create a project.properties file in android_data and add this line&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;android.library.reference.1=google-play-services_lib  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;copy &lt;code&gt;android-support-v4.jar&lt;/code&gt; from the android SDK to "android_data/libs"&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*Copy the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file from Qt ( &lt;code&gt;android_armv7/src/android/java/AndroidManifest.xml&lt;/code&gt;) to the &lt;code&gt;android_data&lt;/code&gt; directory in the project&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add the following the &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
In &lt;code&gt;&amp;lt;activity&amp;gt;&lt;/code&gt;  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language-markup"&gt;&amp;lt;!-- Analytics --&amp;gt;  
&amp;lt;meta-data android:name="com.google.android.gms.version" android:value="@integer/google_play_services_version"/&amp;gt;  
&amp;lt;meta-data android:name="com.google.android.gms.analytics.globalConfigResource" android:resource="@xml/analytics_global_config"/&amp;gt;  
&amp;lt;!-- Analytics --&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in &lt;code&gt;&amp;lt;application&amp;gt;&lt;/code&gt;  &lt;/p&gt;

&lt;pre&gt;&lt;code class="language-markup"&gt;&amp;lt;!-- Used for Google Play Store Campaign Measurement--&amp;gt;;  
&amp;lt;service android:name="com.google.android.gms.analytics.CampaignTrackingService"/&amp;gt;  
&amp;lt;receiver android:name="com.google.android.gms.analytics.CampaignTrackingReceiver" android:exported="true"&amp;gt;  
     &amp;lt;intent-filter&amp;gt;
            &amp;lt;action android:name="com.android.vending.INSTALL_REFERRER"/&amp;gt;
     &amp;lt;/intent-filter&amp;gt;
&amp;lt;/receiver&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This second part is not useful for tracking hits and events. It's used to track installation referrer. Read more about &lt;a href='https://developers.google.com/analytics/devguides/collection/android/campaigns' &gt;Campaign Measurement&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add analytics configuration files, as described in &lt;code&gt;AndroidManifest.xml&lt;/code&gt;, in &lt;code&gt;android_data/res/xml&lt;/code&gt;. I created one for the tracker and one with global parameters. The tracker one contains the tracker ID and it needs to be change to your own value.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id="javaside"&gt;Java side&lt;/h5&gt;

&lt;p&gt;I wrote a short Java class, named QGoogleAnalytics in order to call two of the function provided by the SDK. The class is very simple and has two static public functions &lt;code&gt;sendHit&lt;/code&gt; and &lt;code&gt;sendEvent&lt;/code&gt;. Let's see how we can call them from C++ via JNI.&lt;/p&gt;

&lt;h5 id="cjni"&gt;C++ JNI&lt;/h5&gt;

&lt;p&gt;Qt provides a very useful androidextras package to ease the writing of JNI.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add the following to your pro file&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;android {  
  QT += androidextras
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;The code to call a static method is easy enough. The C++ class inherits from &lt;code&gt;PlatformGoogleAnalytics&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language-cpp"&gt;void AndroidGoogleAnalytics::sendHit(const QString &amp;amp;screenName)  
{
  QAndroidJniObject jsScreenName = QAndroidJniObject::fromString(screenName);
  QAndroidJniObject::callStaticMethod&amp;lt;void&amp;gt;("com/lasconic/QGoogleAnalytics", "sendHit", "(Ljava/lang/String;)V", jsScreenName.object&amp;lt;jstring&amp;gt;());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="iosglue"&gt;iOS glue&lt;/h3&gt;

&lt;h4 id="setupthegoogleanalyticssdkforios"&gt;setup the Google Analytics SDK for iOS&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Download the &lt;a href='https://developers.google.com/analytics/devguides/collection/ios/resources' &gt;Google Analytics SDK for iOS v3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Unzip it&lt;/li&gt;
&lt;li&gt;Create an &lt;code&gt;ios&lt;/code&gt; directory in your project and copy the &lt;code&gt;include&lt;/code&gt; directory in it&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;libs&lt;/code&gt; directory and copy &lt;code&gt;libAdIdAccess.a&lt;/code&gt; and            &lt;code&gt;libGoogleAnalyticsServices.a&lt;/code&gt; in it&lt;/li&gt;
&lt;li&gt;Modify the pro file to link these libraries and add framework dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;ios {  
  QMAKE_LFLAGS += -framework CoreData -framework AdSupport -ObjC
  LIBS += -L$$PWD/ios/libs -lGoogleAnalyticsServices -lAdIdAccess -lsqlite3.0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="objectivecglue"&gt;Objective-C glue&lt;/h4&gt;

&lt;p&gt;Objective-C can be mixed with C++ more easily than Java.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To add an Objective-C class, modify the pro files&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;OBJECTIVE_SOURCES += ios/iosanalytics.mm  
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;also add a header file &lt;code&gt;iosanalytics.h&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This class inherits &lt;code&gt;PlatformGoogleAnalytics&lt;/code&gt; and call the SDK directly. You need to change the GA tracking ID in this class. Qt provides a convenient &lt;code&gt;toNSString()&lt;/code&gt; method for &lt;code&gt;QString&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class="language-objectivec"&gt;void IosGoogleAnalytics::sendHit(const QString &amp;amp;screenName) {  
    id&amp;lt;GAITracker&amp;gt; tracker = [[GAI sharedInstance] defaultTracker];
    // Send a screen view
    [tracker send:[[[GAIDictionaryBuilder createAppView] set:screenName.toNSString() forKey:kGAIScreenName] build]];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="conclusion"&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;This is a working and simple solution to integrate an iOS/Android Qt Quick app with Google Analytics. The code is available on GitHub: &lt;a href='https://github.com/lasconic/GATutorial-QML' &gt;GATutorial-QML&lt;/a&gt;. &lt;br /&gt;
The approach would be similar for any service which provide more value in native SDKs than in its crossplatform API, or even doesn't provide a crossplatform API.&lt;/p&gt;

&lt;p&gt;Of course, it's a crude example. We could expose more &lt;a href='https://developers.google.com/analytics/solutions/mobile-implementation-guide' &gt;Google Analytics features&lt;/a&gt; to QML such as e-commerce tracking. Also, if we would want to support more platforms such as desktop ones or Windows Mobile, we would need to complete the fallback to Measurement Protocol.&lt;/p&gt;

&lt;p&gt;Any comment? Find me on &lt;a href='https://twitter.com/lasconic' &gt;twitter&lt;/a&gt;.&lt;/p&gt;</description><link>http://127.0.0.1:2368/how-to-use-google-analytics-in-a-qt-quick-app-for-androidios/</link><guid isPermaLink="false">cfc1bb7a-ae6f-4387-b8e0-257452a6bbda</guid><category>analytics</category><category>Qt</category><category>QML</category><category>Qt Quick</category><category>Android</category><category>iOs</category><category>mobile</category><dc:creator>lasconic</dc:creator><pubDate>Thu, 11 Sep 2014 21:33:17 GMT</pubDate></item></channel></rss>